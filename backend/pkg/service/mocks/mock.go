// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	augventure "github.com/klausfun/Augventure"
)

// MockAuthorization is a mock of Authorization interface.
type MockAuthorization struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMockRecorder
}

// MockAuthorizationMockRecorder is the mock recorder for MockAuthorization.
type MockAuthorizationMockRecorder struct {
	mock *MockAuthorization
}

// NewMockAuthorization creates a new mock instance.
func NewMockAuthorization(ctrl *gomock.Controller) *MockAuthorization {
	mock := &MockAuthorization{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorization) EXPECT() *MockAuthorizationMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthorization) CreateUser(user augventure.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthorizationMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthorization)(nil).CreateUser), user)
}

// GenerateToken mocks base method.
func (m *MockAuthorization) GenerateToken(password, email string) (augventure.Author, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateToken", password, email)
	ret0, _ := ret[0].(augventure.Author)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GenerateToken indicates an expected call of GenerateToken.
func (mr *MockAuthorizationMockRecorder) GenerateToken(password, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateToken", reflect.TypeOf((*MockAuthorization)(nil).GenerateToken), password, email)
}

// ParseToken mocks base method.
func (m *MockAuthorization) ParseToken(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthorizationMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthorization)(nil).ParseToken), token)
}

// MockEvent is a mock of Event interface.
type MockEvent struct {
	ctrl     *gomock.Controller
	recorder *MockEventMockRecorder
}

// MockEventMockRecorder is the mock recorder for MockEvent.
type MockEventMockRecorder struct {
	mock *MockEvent
}

// NewMockEvent creates a new mock instance.
func NewMockEvent(ctrl *gomock.Controller) *MockEvent {
	mock := &MockEvent{ctrl: ctrl}
	mock.recorder = &MockEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvent) EXPECT() *MockEventMockRecorder {
	return m.recorder
}

// CheckingTheStatus mocks base method.
func (m *MockEvent) CheckingTheStatus(eventId int) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckingTheStatus", eventId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckingTheStatus indicates an expected call of CheckingTheStatus.
func (mr *MockEventMockRecorder) CheckingTheStatus(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckingTheStatus", reflect.TypeOf((*MockEvent)(nil).CheckingTheStatus), eventId)
}

// Create mocks base method.
func (m *MockEvent) Create(userId int, event augventure.Event) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, event)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEventMockRecorder) Create(userId, event interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEvent)(nil).Create), userId, event)
}

// Delete mocks base method.
func (m *MockEvent) Delete(userId, eventId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", userId, eventId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockEventMockRecorder) Delete(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEvent)(nil).Delete), userId, eventId)
}

// FilterEvents mocks base method.
func (m *MockEvent) FilterEvents(authorId int) ([]augventure.EventAndSprints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterEvents", authorId)
	ret0, _ := ret[0].([]augventure.EventAndSprints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterEvents indicates an expected call of FilterEvents.
func (mr *MockEventMockRecorder) FilterEvents(authorId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterEvents", reflect.TypeOf((*MockEvent)(nil).FilterEvents), authorId)
}

// FinishImplementing mocks base method.
func (m *MockEvent) FinishImplementing(userId, eventId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishImplementing", userId, eventId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishImplementing indicates an expected call of FinishImplementing.
func (mr *MockEventMockRecorder) FinishImplementing(userId, eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishImplementing", reflect.TypeOf((*MockEvent)(nil).FinishImplementing), userId, eventId)
}

// FinishVoting mocks base method.
func (m *MockEvent) FinishVoting(userId, eventId, suggestionWinnerId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishVoting", userId, eventId, suggestionWinnerId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FinishVoting indicates an expected call of FinishVoting.
func (mr *MockEventMockRecorder) FinishVoting(userId, eventId, suggestionWinnerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishVoting", reflect.TypeOf((*MockEvent)(nil).FinishVoting), userId, eventId, suggestionWinnerId)
}

// GetAll mocks base method.
func (m *MockEvent) GetAll() ([]augventure.EventAndSprints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]augventure.EventAndSprints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockEventMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockEvent)(nil).GetAll))
}

// GetById mocks base method.
func (m *MockEvent) GetById(eventId int) (augventure.EventAndSprints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", eventId)
	ret0, _ := ret[0].(augventure.EventAndSprints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockEventMockRecorder) GetById(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockEvent)(nil).GetById), eventId)
}

// Update mocks base method.
func (m *MockEvent) Update(userId, eventId int, input augventure.UpdateEventInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", userId, eventId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockEventMockRecorder) Update(userId, eventId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockEvent)(nil).Update), userId, eventId, input)
}

// MockSprint is a mock of Sprint interface.
type MockSprint struct {
	ctrl     *gomock.Controller
	recorder *MockSprintMockRecorder
}

// MockSprintMockRecorder is the mock recorder for MockSprint.
type MockSprintMockRecorder struct {
	mock *MockSprint
}

// NewMockSprint creates a new mock instance.
func NewMockSprint(ctrl *gomock.Controller) *MockSprint {
	mock := &MockSprint{ctrl: ctrl}
	mock.recorder = &MockSprintMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSprint) EXPECT() *MockSprintMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSprint) Create(eventId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", eventId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSprintMockRecorder) Create(eventId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSprint)(nil).Create), eventId)
}

// Update mocks base method.
func (m *MockSprint) Update(input augventure.UpdateSprintInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", input)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSprintMockRecorder) Update(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSprint)(nil).Update), input)
}

// MockProfile is a mock of Profile interface.
type MockProfile struct {
	ctrl     *gomock.Controller
	recorder *MockProfileMockRecorder
}

// MockProfileMockRecorder is the mock recorder for MockProfile.
type MockProfileMockRecorder struct {
	mock *MockProfile
}

// NewMockProfile creates a new mock instance.
func NewMockProfile(ctrl *gomock.Controller) *MockProfile {
	mock := &MockProfile{ctrl: ctrl}
	mock.recorder = &MockProfileMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProfile) EXPECT() *MockProfileMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockProfile) GetById(userId int) (augventure.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", userId)
	ret0, _ := ret[0].(augventure.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockProfileMockRecorder) GetById(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockProfile)(nil).GetById), userId)
}

// UpdatePassword mocks base method.
func (m *MockProfile) UpdatePassword(userId int, input augventure.UpdatePasswordInput) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePassword", userId, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePassword indicates an expected call of UpdatePassword.
func (mr *MockProfileMockRecorder) UpdatePassword(userId, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePassword", reflect.TypeOf((*MockProfile)(nil).UpdatePassword), userId, input)
}

// MockSuggestion is a mock of Suggestion interface.
type MockSuggestion struct {
	ctrl     *gomock.Controller
	recorder *MockSuggestionMockRecorder
}

// MockSuggestionMockRecorder is the mock recorder for MockSuggestion.
type MockSuggestionMockRecorder struct {
	mock *MockSuggestion
}

// NewMockSuggestion creates a new mock instance.
func NewMockSuggestion(ctrl *gomock.Controller) *MockSuggestion {
	mock := &MockSuggestion{ctrl: ctrl}
	mock.recorder = &MockSuggestionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSuggestion) EXPECT() *MockSuggestionMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSuggestion) Create(userId int, suggestion augventure.Suggestion) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", userId, suggestion)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSuggestionMockRecorder) Create(userId, suggestion interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSuggestion)(nil).Create), userId, suggestion)
}

// GetBySprintId mocks base method.
func (m *MockSuggestion) GetBySprintId(sprintId int) ([]augventure.FilterSuggestions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySprintId", sprintId)
	ret0, _ := ret[0].([]augventure.FilterSuggestions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBySprintId indicates an expected call of GetBySprintId.
func (mr *MockSuggestionMockRecorder) GetBySprintId(sprintId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySprintId", reflect.TypeOf((*MockSuggestion)(nil).GetBySprintId), sprintId)
}

// Vote mocks base method.
func (m *MockSuggestion) Vote(voteType bool, suggestionId, userId int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Vote", voteType, suggestionId, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Vote indicates an expected call of Vote.
func (mr *MockSuggestionMockRecorder) Vote(voteType, suggestionId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Vote", reflect.TypeOf((*MockSuggestion)(nil).Vote), voteType, suggestionId, userId)
}
